generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// Enums
enum VerifyType {
  EMAIL
  PASSWORD_RESET
}

enum PostStatus {
  DRAFT
  PUBLISHED
  UNPUBLISHED
}

model users {
  id                  Int                   @id @default(autoincrement())
  name                String
  email               String                @unique
  password            String
  email_verified_at   DateTime?
  is_suspended        Boolean               @default(false)
  created_at          DateTime              @default(now())
  updated_at          DateTime              @updatedAt
  personal_tokens     personal_tokens[]
  verification_tokens verification_tokens[]
  user_roles          user_roles[]
  posts               posts[]
}

model personal_tokens {
  id      Int @id @default(autoincrement())
  user_id Int

  user_device   String?
  refresh_token String
  created_at    DateTime @default(now())
  updated_at    DateTime @updatedAt

  user users @relation(fields: [user_id], references: [id], onDelete: Cascade)

  @@index([refresh_token], type: Hash)
}

model verification_tokens {
  id          Int        @id @default(autoincrement())
  user_id     Int
  code        Int
  token       String
  verify_type VerifyType
  expires_at  DateTime
  created_at  DateTime   @default(now())

  users users @relation(fields: [user_id], references: [id], onDelete: Cascade)

  @@index([code], type: Hash)
  @@index([token], type: Hash)
}

model user_roles {
  id      Int @id @default(autoincrement())
  user_id Int @unique
  role_id Int

  users users @relation(fields: [user_id], references: [id], onDelete: Cascade)
  roles roles @relation(fields: [role_id], references: [id])
}

model role_permissions {
  id            Int @id @default(autoincrement())
  role_id       Int
  permission_id Int

  roles       roles       @relation(fields: [role_id], references: [id], onDelete: Cascade)
  permissions permissions @relation(fields: [permission_id], references: [id], onDelete: Cascade)
}

model roles {
  id         Int      @id @default(autoincrement())
  name       String   @unique
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt

  user_roles       user_roles[]
  role_permissions role_permissions[]
}

model permissions {
  id               Int                @id @default(autoincrement())
  name             String             @unique
  group            String
  created_at       DateTime           @default(now())
  updated_at       DateTime           @updatedAt
  role_permissions role_permissions[]
}

model posts {
  id          Int        @id @default(autoincrement())
  user_id     Int
  title       String     @unique
  slug        String
  description String     @db.Text
  status      PostStatus
  created_at  DateTime   @default(now())
  updated_at  DateTime   @updatedAt

  users users @relation(fields: [user_id], references: [id], onDelete: Cascade)
}
